{"version":3,"sources":["components/CalcButton.tsx","components/Entry.tsx","components/OpEntry.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CalcButton","change","op","operations","num1","num2","className","onClick","includes","Entry","setNum","type","id","onChange","OpEntry","setOp","App","useState","answer","setAnswer","setNum1","setNum2","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAOaA,EAAa,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,OAAQC,EAA8C,EAA9CA,GAC5BC,GAD0E,EAA1CC,KAA0C,EAApCC,KACzB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MAS7C,OAAO,wBAAQC,UAAY,QAAQC,QAAS,WAPvCJ,EAAWK,SAASN,IAGrBD,EAAO,mBAIJ,wBCZIQ,G,MAAQ,SAAC,GAAgC,EAA/BC,OAIvB,OAAO,uBAAOC,KAAK,SAASC,GAAI,MAAMC,SAAY,iBCJrCC,EAAU,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAOb,EAA8B,EAA9BA,GAK5B,OAAO,uBAAOU,GAAI,KAAKC,SAAY,WAH/BE,EAAMb,OCsBCc,MAvBf,WACE,MAA4BC,mBAAiB,IAA7C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoBF,mBAAiB,IAArC,mBAAOf,EAAP,KAAWa,EAAX,KACA,EAAwBE,mBAAiB,GAAzC,mBAAOb,EAAP,KAAagB,EAAb,KACA,EAAwBH,mBAAiB,GAAzC,mBAAOZ,EAAP,KAAagB,EAAb,KAEA,OADAC,QAAQC,IAAInB,GAEV,sBAAKE,UAAU,MAAf,UACE,gDACA,2IACA,sBAAKM,GAAG,YAAR,UACE,mDACA,cAAC,EAAD,CAAOF,OAAQU,IACf,cAAC,EAAD,CAASL,MAAOA,EAAOb,GAAIA,IAC3B,cAAC,EAAD,CAAOQ,OAAQW,IACf,oCAAOH,QAET,cAAC,EAAD,CAAYjB,OAAQkB,EAAWjB,GAAIA,EAAIE,KAAQA,EAAMC,KAAMA,QCTlDmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.59ababb6.chunk.js","sourcesContent":["interface ButtonProps{\r\n  change: (text:string) =>void,\r\n  op:string,\r\n  num1:number,\r\n  num2:number,\r\n}\r\n\r\nexport const CalcButton = ({change, op, num1, num2}: ButtonProps): JSX.Element => {\r\n  const operations = [\"+\", \"-\", \"*\", \"/\", \"^\", \"%\"];\r\n  const calc = () =>  {\r\n    if(operations.includes(op)){      \r\n    }\r\n    else{\r\n      change(\"Invalid Answer\")\r\n    }\r\n  }\r\n\r\n  return <button className = \"space\" onClick={() => calc()}>Calculate</button>\r\n}","import React, { useState } from 'react';\r\n\r\ninterface entry{\r\n  setNum:(num:number) =>void,\r\n}\r\nexport const Entry = ({setNum}:entry): JSX.Element => {\r\n  const update = ()=>{\r\n}\r\n\r\nreturn <input type=\"number\" id= \"num\" onChange = {()=>update()} ></input>\r\n  }","interface opEntry{\r\n    setOp:(text:string) => void\r\n    op:string\r\n}\r\n\r\nexport const OpEntry = ({setOp, op}: opEntry): JSX.Element => {\r\n    const update = ()=>{\r\n        setOp(op);\r\n    }\r\n\r\n    return <input id= \"op\" onChange = {()=>update()} ></input>\r\n  }","import React, { useState } from 'react';\nimport { CalcButton } from './components/CalcButton';\nimport './App.css';\nimport {Entry} from './components/Entry';\nimport {OpEntry} from './components/OpEntry';\n\nfunction App():JSX.Element {\n  const [answer, setAnswer] = useState<string>(\"\");\n  const [op, setOp] = useState<string>(\"\");\n  const [num1, setNum1] = useState<number>(0);\n  const [num2, setNum2] = useState<number>(0);\n  console.log(num1);\n  return (\n    <div className=\"App\">\n      <h1>Calculator App</h1>\n      <p>Input a number, an operation, and then another number.  The supported operations are +, -, *, /, ^, and %.</p>\n      <div id=\"calculate\">\n        <p>Happy Calculating!</p>\n        <Entry setNum={setNum1}></Entry>\n        <OpEntry setOp={setOp} op={op}></OpEntry>\n        <Entry setNum={setNum2}></Entry>\n        <p> = {answer}</p>\n      </div>\n      <CalcButton change={setAnswer} op={op} num1 = {num1} num2={num2}></CalcButton>      \n    </div>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}