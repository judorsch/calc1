{"version":3,"sources":["components/CalcButton.tsx","components/Entry.tsx","components/OpEntry.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CalcButton","change","op","num1","num2","operations","calc","includes","className","onClick","Entry","setNum","num","value","type","onChange","e","target","OpEntry","setOp","id","App","useState","answer","setAnswer","setNum1","setNum2","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAOaA,EAAa,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,OAAQC,EAA8C,EAA9CA,GAAIC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,KACtCC,EAAa,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAqC7C,IAAMC,EAAO,WACRD,EAAWE,SAASL,GAnCrBD,EADQ,MAAPC,EACM,IAAIC,EAAOC,GAEL,MAAPF,EACC,IAAIC,EAAOC,GAEL,MAAPF,EACC,GAAIC,EAAOC,EAEL,MAAPF,EACM,IAATE,EACM,gBAGA,GAAID,EAAOC,EAGP,MAAPF,EACHC,GAAQ,EACF,gBAGA,IAAIA,EAAOC,GAIR,IAATA,EACM,gBAGA,GAAID,EAAOC,GAUpBH,EAAO,kBAIX,OAAO,wBAAQO,UAAY,QAAQC,QAAS,kBAAMH,KAA3C,yB,MClDF,SAASI,EAAT,GAAiD,IAAjCC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,IAC7B,OACE,uBAAOJ,UAAW,OAAOK,MAAOD,EAAKE,KAAK,SAASC,SAAU,SAAAC,GAAC,OAAEL,GAAQK,EAAEC,OAAOJ,UCA9E,IAAMK,EAAU,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAOjB,EAA8B,EAA9BA,GAC5B,OACI,uBAAOkB,GAAI,KAAKP,MAAOX,EAAIY,KAAK,OAAOC,SAAU,SAAAC,GAAC,OAAEG,EAAMH,EAAEC,OAAOJ,WCuB5DQ,MAzBf,WACE,MAA4BC,mBAAiB,IAA7C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoBF,mBAAiB,IAArC,mBAAOpB,EAAP,KAAWiB,EAAX,KACA,EAAwBG,mBAAiB,GAAzC,mBAAOnB,EAAP,KAAasB,EAAb,KACA,EAAwBH,mBAAiB,GAAzC,mBAAOlB,EAAP,KAAasB,EAAb,KAIA,OAHAC,QAAQC,IAAIzB,GACZwB,QAAQC,IAAI1B,GACZyB,QAAQC,IAAIxB,GAEV,sBAAKI,UAAU,MAAf,UACE,gDACA,2IACA,sBAAKY,GAAG,YAAR,UACE,mDACA,cAACV,EAAD,CAAOC,OAAQc,EAASb,IAAMT,IAC9B,cAAC,EAAD,CAASgB,MAAOA,EAAOjB,GAAIA,IAC3B,cAACQ,EAAD,CAAOC,OAAQe,EAASd,IAAOR,IAC/B,oBAAGgB,GAAK,MAAR,gBAAkBG,QAEpB,cAAC,EAAD,CAAYtB,OAAQuB,EAAWtB,GAAIA,EAAIC,KAAQA,EAAMC,KAAMA,QCXlDyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f6debf37.chunk.js","sourcesContent":["interface ButtonProps{\r\n  change: (text:string) =>void,\r\n  op:string,\r\n  num1:number,\r\n  num2:number,\r\n}\r\n\r\nexport const CalcButton = ({change, op, num1, num2}: ButtonProps): JSX.Element => {\r\n  const operations = [\"+\", \"-\", \"*\", \"/\", \"^\", \"%\"];\r\n  function calculate(){\r\n    if(op === \"+\"){\r\n      change(\"\"+(num1 + num2))\r\n    }\r\n    else if(op === \"-\"){\r\n      change(\"\"+(num1 - num2))\r\n    }\r\n    else if(op === \"*\"){\r\n      change(\"\"+(num1 * num2))\r\n    }\r\n    else if(op === \"/\"){\r\n      if(num2 === 0){\r\n        change(\"Invalid Input\")\r\n      }\r\n      else{\r\n        change(\"\"+(num1 / num2))\r\n      }\r\n    }\r\n    else if(op === \"^\"){\r\n      if(num1 <= 0){\r\n        change(\"Invalid Input\")\r\n      }\r\n      else{\r\n        change(\"\"+(num1 ^ num2))\r\n      }\r\n    }\r\n    else{\r\n      if(num2 === 0){\r\n        change(\"Invalid Input\")\r\n      }\r\n      else{\r\n        change(\"\"+(num1 % num2))\r\n      }\r\n    }\r\n\r\n  }\r\n  const calc = () =>  {\r\n    if(operations.includes(op)){\r\n      calculate();      \r\n    }\r\n    else{\r\n      change(\"Invalid Input\")\r\n    }\r\n  }\r\n\r\n  return <button className = \"space\" onClick={() => calc()}>Calculate!</button>\r\n}","interface entry{\r\n  setNum:(num:number) =>void,\r\n  num:number,\r\n}\r\nexport function Entry({setNum, num}:entry): JSX.Element{\r\n  return(\r\n    <input className =\"nums\" value={num} type=\"number\" onChange={e=>setNum(+e.target.value)}></input>)\r\n  }","interface opEntry{\r\n    setOp:(text:string) => void\r\n    op:string\r\n}\r\n\r\n\r\nexport const OpEntry = ({setOp, op}: opEntry): JSX.Element => {\r\n    return(\r\n        <input id =\"op\" value={op} type=\"text\" onChange={e=>setOp(e.target.value)}></input>)\r\n  }","import React, { useState } from 'react';\nimport { CalcButton } from './components/CalcButton';\nimport './App.css';\nimport {Entry} from './components/Entry';\nimport {OpEntry} from './components/OpEntry';\n\nfunction App():JSX.Element {\n  const [answer, setAnswer] = useState<string>(\"\");\n  const [op, setOp] = useState<string>(\"\");\n  const [num1, setNum1] = useState<number>(0);\n  const [num2, setNum2] = useState<number>(0);\n  console.log(num1);\n  console.log(op);\n  console.log(num2);\n  return (\n    <div className=\"App\">\n      <h1>Calculator App</h1>\n      <p>Input a number, an operation, and then another number.  The supported operations are +, -, *, /, ^, and %.</p>\n      <div id=\"calculate\">\n        <p>Happy Calculating!</p>\n        <Entry setNum={setNum1} num ={num1}></Entry>\n        <OpEntry setOp={setOp} op={op}></OpEntry>\n        <Entry setNum={setNum2} num = {num2}></Entry>\n        <p id = \"ans\"> = {answer}</p>\n      </div>\n      <CalcButton change={setAnswer} op={op} num1 = {num1} num2={num2}></CalcButton>      \n    </div>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}