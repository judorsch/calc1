{"version":3,"sources":["components/CalcButton.tsx","components/OpEntry.tsx","components/Entry.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CalcButton","change","op","num1","num2","operations","calc","numA","parseFloat","numB","includes","isNaN","JSON","stringify","result","calculate","id","onClick","OpEntry","setOp","className","value","type","onChange","e","target","Entry","setAns","ans","App","useState","answer","setAnswer","setNum1","setNum2","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAOaA,EAAa,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,OAAQC,EAA8C,EAA9CA,GAAIC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,KACtCC,EAAa,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAwC7C,IAAMC,EAAO,WACX,IAAMC,EAAOC,WAAWL,GAClBM,EAAOD,WAAWJ,IACrBC,EAAWK,SAASR,IAASS,MAAMJ,IAAYI,MAAMF,GAItDR,EAAO,iBA9CX,SAAmBM,EAAaE,GAC9B,GAAU,MAAPP,EACDD,EAAOW,KAAKC,UAAUN,EAAOE,SAE1B,GAAU,MAAPP,EACND,EAAOW,KAAKC,UAAUN,EAAOE,SAE1B,GAAU,MAAPP,EACND,EAAOW,KAAKC,UAAUN,EAAOE,SAE1B,GAAU,MAAPP,EAAW,CACjB,IAAMY,EAASF,KAAKC,UAAUN,EAAOE,GAEnCR,EADY,SAAXa,EACM,gBAGAA,QAGN,GAAU,MAAPZ,EAAW,CACjB,IAAMY,EAASF,KAAKC,UAAL,SAAeN,EAAQE,IAEpCR,EADY,SAAXa,EACM,gBAGAA,OAGP,CACF,IAAMA,EAASF,KAAKC,UAAUN,EAAOE,GAEnCR,EADY,SAAXa,EACM,gBAGAA,IASTC,CAAUR,EAAME,IAOpB,OAAO,wBAAQO,GAAK,QAAQC,QAAS,kBAAMX,KAApC,yBCpDIY,G,MAAU,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOjB,EAAkC,EAAlCA,GAAIc,EAA8B,EAA9BA,GAChC,OACI,uBAAOI,UAAW,KAAKJ,GAAKA,EAAIK,MAAOnB,EAAIoB,KAAK,OAAOC,SAAU,SAAAC,GAAC,OAAEL,EAAMK,EAAEC,OAAOJ,YCJ9EK,EAAQ,SAAC,GAAsC,EAArCC,OAAsC,IAA9BC,EAA6B,EAA7BA,IAC3B,OACI,sBAAKZ,GAAI,MAAT,UACI,uBAAOA,GAAI,SAAX,eACA,uBAAOA,GAAI,SAASK,MAAOO,EAAKN,KAAK,aCsBlCO,MAzBf,WACE,MAA4BC,mBAAiB,IAA7C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoBF,mBAAiB,IAArC,mBAAO5B,EAAP,KAAWiB,EAAX,KACA,EAAwBW,mBAAiB,IAAzC,mBAAO3B,EAAP,KAAa8B,EAAb,KACA,EAAwBH,mBAAiB,IAAzC,mBAAO1B,EAAP,KAAa8B,EAAb,KAIA,OAHAC,QAAQC,IAAIjC,GACZgC,QAAQC,IAAIlC,GACZiC,QAAQC,IAAIhC,GAEV,sBAAKgB,UAAU,MAAf,UACE,gDACA,4LACA,sBAAKJ,GAAG,YAAR,UACE,mDACA,cAAC,EAAD,CAASA,GAAK,MAAOG,MAAOc,EAAS/B,GAAKC,IAC1C,cAAC,EAAD,CAAUa,GAAK,KAAKG,MAAOA,EAAOjB,GAAIA,IACtC,cAAC,EAAD,CAASc,GAAK,MAAOG,MAAOe,EAAShC,GAAKE,IAC1C,cAAC,EAAD,CAAOuB,OAAUK,EAAWJ,IAAOG,OAErC,cAAC,EAAD,CAAY9B,OAAQ+B,EAAW9B,GAAIA,EAAIC,KAAQA,EAAMC,KAAMA,QCXlDiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9ce39005.chunk.js","sourcesContent":["interface ButtonProps{\r\n  change: (text:string) =>void,\r\n  op:string,\r\n  num1:string,\r\n  num2:string,\r\n}\r\n\r\nexport const CalcButton = ({change, op, num1, num2}: ButtonProps): JSX.Element => {\r\n  const operations = [\"+\", \"-\", \"*\", \"/\", \"^\", \"%\"];\r\n  function calculate(numA:number, numB:number){\r\n    if(op === \"+\"){\r\n      change(JSON.stringify(numA + numB))\r\n    }\r\n    else if(op === \"-\"){\r\n      change(JSON.stringify(numA - numB))\r\n    }\r\n    else if(op === \"*\"){\r\n      change(JSON.stringify(numA * numB))\r\n    }\r\n    else if(op === \"/\"){\r\n      const result = JSON.stringify(numA / numB);\r\n      if(result === 'null'){\r\n        change(\"Invalid Input\")\r\n      }\r\n      else{\r\n        change(result)\r\n      }\r\n    }\r\n    else if(op === \"^\"){\r\n      const result = JSON.stringify(numA ** numB);\r\n      if(result === 'null'){\r\n        change(\"Invalid Input\")\r\n      }\r\n      else{\r\n        change(result)\r\n      }\r\n    }\r\n    else{\r\n      const result = JSON.stringify(numA % numB);\r\n      if(result === 'null'){\r\n        change(\"Invalid Input\")\r\n      }\r\n      else{\r\n        change(result)\r\n      }\r\n    }\r\n\r\n  }\r\n  const calc = () =>  {\r\n    const numA = parseFloat(num1);\r\n    const numB = parseFloat(num2);\r\n    if(operations.includes(op) && (!isNaN(numA)) && (!isNaN(numB))){\r\n      calculate(numA, numB);      \r\n    }\r\n    else{\r\n      change(\"Invalid Input\")\r\n    }\r\n  }\r\n\r\n  return <button id = \"space\" onClick={() => calc()}>Calculate!</button>\r\n}","interface opEntry{\r\n    setOp:(text:string) => void\r\n    op:string\r\n    id:string\r\n}\r\n\r\n\r\nexport const OpEntry = ({setOp, op, id}: opEntry): JSX.Element => {\r\n    return(\r\n        <input className =\"op\" id ={id} value={op} type=\"text\" onChange={e=>setOp(e.target.value)}></input>)\r\n  }","interface props{\r\n    setAns:(text:string) => void,\r\n    ans:string,\r\n}\r\n\r\nexport const Entry = ({setAns, ans}: props): JSX.Element => {\r\n    return(\r\n        <div id =\"ans\">\r\n            <label id =\"equals\">=</label>\r\n            <input id =\"answer\" value={ans} type=\"text\"></input>\r\n        </div>\r\n    )\r\n  }","import React, { useState } from 'react';\nimport { CalcButton } from './components/CalcButton';\nimport './App.css';\nimport {OpEntry} from './components/OpEntry';\nimport { Entry } from './components/Entry';\n\nfunction App():JSX.Element {\n  const [answer, setAnswer] = useState<string>(\"\");\n  const [op, setOp] = useState<string>(\"\");\n  const [num1, setNum1] = useState<string>(\"\");\n  const [num2, setNum2] = useState<string>(\"\");\n  console.log(num1);\n  console.log(op);\n  console.log(num2);\n  return (\n    <div className=\"App\">\n      <h1>Calculator App</h1>\n      <p>Input a number, an operation, and then another number.  The supported operations are +, -, *(multiply), /, ^, and % (mod). Enter all fractions as decimals.</p>\n      <div id=\"calculate\">\n        <p>Happy Calculating!</p>\n        <OpEntry id ={\"num\"} setOp={setNum1} op ={num1}></OpEntry>\n        <OpEntry  id ={\"op\"}setOp={setOp} op={op}></OpEntry>\n        <OpEntry id ={\"num\"} setOp={setNum2} op ={num2}></OpEntry>\n        <Entry setAns = {setAnswer} ans = {answer}></Entry>\n      </div>\n      <CalcButton change={setAnswer} op={op} num1 = {num1} num2={num2}></CalcButton>      \n    </div>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}